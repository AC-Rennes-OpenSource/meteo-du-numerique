{
  "env": {
      "browser": true,
      "node": true,
      "es6": true,
      "jest/globals": true
  },
  "extends": [
      "plugin:@typescript-eslint/recommended",
      "plugin:@typescript-eslint/recommended-requiring-type-checking",
      "eslint:recommended",
      "plugin:react/recommended"
  ],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
      "project": "./tsconfig.json",
      "ecmaFeatures": {
          "jsx": true
      },
      "ecmaVersion": 2018,
      "sourceType": "module"
  },
  "settings": {
      "react": {
          "createClass": "createReactClass", // Regex for Component Factory to use,
          "version": "detect"
      }
  },
  "plugins": [
      "@typescript-eslint",
      "jsdoc",
      "eslint-plugin-prefer-arrow",
      "eslint-plugin-jsx-a11y",
      "eslint-plugin-jest",
      "eslint-plugin-react-hooks"
  ],
  "rules": {
    "@typescript-eslint/explicit-function-return-type": "off",
      "react/no-unescaped-entities": "off",
      "react/display-name": "off",
      "@typescript-eslint/no-floating-promises": [
          "error",
          {
              "ignoreVoid": false
          }
      ],
      "react/prop-types": 0,
      "@typescript-eslint/array-type": [
          "error",
          {
              "default": "array"
          }
      ],
      "@typescript-eslint/ban-types": [
          "error",
          {
              "types": {
                  "Object": {
                      "message": "Avoid using the `Object` type. Did you mean `object`?"
                  },
                  "Function": {
                      "message": "Avoid using the `Function` type. Prefer a specific function type, like `() => void`."
                  },
                  "Boolean": {
                      "message": "Avoid using the `Boolean` type. Did you mean `boolean`?"
                  },
                  "Number": {
                      "message": "Avoid using the `Number` type. Did you mean `number`?"
                  },
                  "String": {
                      "message": "Avoid using the `String` type. Did you mean `string`?"
                  },
                  "Symbol": {
                      "message": "Avoid using the `Symbol` type. Did you mean `symbol`?"
                  }
              }
          }
      ],
      "@typescript-eslint/dot-notation": "error",
      "@typescript-eslint/explicit-member-accessibility": [
          "off",
          {
              "accessibility": "explicit"
          }
      ],
      "@typescript-eslint/interface-name-prefix": "off",
      "@typescript-eslint/member-delimiter-style": [
          "error",
          {
              "multiline": {
                  "delimiter": "none",
                  "requireLast": true
              },
              "singleline": {
                  "delimiter": "semi",
                  "requireLast": false
              }
          }
      ],
      "@typescript-eslint/no-empty-interface": "off",
      "@typescript-eslint/no-explicit-any": "off",
      "@typescript-eslint/no-parameter-properties": "off",
      "@typescript-eslint/no-unused-expressions": "error",
      "no-unused-vars": "off",
      "@typescript-eslint/no-unused-vars": "error",
      "@typescript-eslint/no-use-before-define": "off",
      "@typescript-eslint/prefer-for-of": "error",
      "@typescript-eslint/prefer-function-type": "error",
      "@typescript-eslint/quotes": "off",
      "@typescript-eslint/semi": [
          "error",
          "never"
      ],
      "@typescript-eslint/triple-slash-reference": [
          "error",
          {
              "path": "always",
              "types": "prefer-import",
              "lib": "always"
          }
      ],
      "@typescript-eslint/unified-signatures": "error",
      "arrow-parens": [
          "off",
          "always"
      ],
      "camelcase": "error",
      "comma-dangle": "off",
      "complexity": "off",
      "constructor-super": "error",
      "eqeqeq": [
          "error",
          "smart"
      ],
      "guard-for-in": "error",
      "id-blacklist": [
          "error",
          "any",
          "Number",
          "number",
          "String",
          "string",
          "Boolean",
          "boolean",
          "Undefined"
      ],
      "id-match": "error",
      "jsdoc/check-alignment": "error",
      "jsdoc/check-indentation": "error",
      "jsdoc/newline-after-description": "error",
      "max-classes-per-file": [
          "error",
          1
      ],
      "max-len": [
          "error",
          {
              "ignoreRegExpLiterals": false,
              "ignorePattern": "^import [^,]+ from |^export | implements",
              "ignoreComments": true,
              "code": 120
          }
      ],
      "max-lines": [
          "error",
          200
      ],
      "new-parens": "error",
      "no-bitwise": "error",
      "no-caller": "error",
      "no-cond-assign": "error",
      "no-console": [
          "error",
          {
              "allow": [
                  "debug",
                  "info",
                  "dirxml",
                  "warn",
                  "error",
                  "dir",
                  "time",
                  "timeEnd",
                  "timeLog",
                  "trace",
                  "assert",
                  "clear",
                  "count",
                  "countReset",
                  "group",
                  "groupCollapsed",
                  "groupEnd",
                  "table",
                  "Console",
                  "markTimeline",
                  "profile",
                  "profileEnd",
                  "timeline",
                  "timelineEnd",
                  "timeStamp",
                  "context"
              ]
          }
      ],
      "no-debugger": "error",
      "no-empty": "error",
      "no-eval": "error",
      "no-fallthrough": "off",
      "no-invalid-this": "off",
      "no-new-wrappers": "error",
      "no-shadow": [
          "error",
          {
              "hoist": "all"
          }
      ],
      "no-throw-literal": "error",
      "no-trailing-spaces": "error",
      "no-undef-init": "error",
      "no-underscore-dangle": "error",
      "no-unsafe-finally": "error",
      "no-unused-labels": "error",
      "object-shorthand": "error",
      "one-var": [
          "error",
          "never"
      ],
      "prefer-arrow/prefer-arrow-functions": "error",
      "quote-props": "off",
      "radix": "error",
      "spaced-comment": [
          "error",
          "always",
          {
              "markers": [
                  "/"
              ]
          }
      ],
      "use-isnan": "error",
      "valid-typeof": "off"
  }
}