desc "Construire l'AppBundle Android"
lane :build_android do
UI.message("Construction de l'AppBundle Android...")

# Construire l'AppBundle en release
  sh "flutter clean"
    sh "flutter pub get"
sh "flutter build appbundle --release"
UI.message("Build Android réalisé.")

# Extraire la version et le code de version depuis pubspec.yaml
version = get_version_from_pubspec
version_name = version[:version_number]
version_code = version[:build_number]

# Obtenez la date du jour sous forme de AAAAMMJJ (ex. : 24122024 pour 24 décembre 2024)
                    date_today = Time.now.strftime("%d%m%Y")

# Créer le nom du fichier AppBundle avec la version
aab_filename = "MeteoApp_#{version_name}+#{version_code}_#{date_today}.aab"
UI.message("Nom du fichier AAB : #{aab_filename}")

# Déplacer le fichier généré dans un dossier organisé avec le nom personnalisé
sh "mkdir -p ../build_output"
sh "cp ../build/app/outputs/bundle/release/app-release.aab ../build_output/#{aab_filename}"

UI.message("Android AppBundle généré dans `build_output/#{aab_filename}`")
end

desc "Construire l'IPA iOS"
lane :build_ios do
  # Assurez-vous que le projet Flutter est prêt

#   sh "flutter clean"
#   sh "flutter pub get"
#   sh "flutter build ios"
  sh "flutter build ipa --release"

  # Construire l'IPA à partir du projet iOS Flutter
  # Paramètres de signature
  sign_command = "xcodebuild -workspace ../ios/Runner.xcworkspace -scheme Runner -configuration Release -archivePath ../build/ios/archive/Runner.xcarchive archive"
  sh sign_command

     # Extraire la version et le code de version depuis pubspec.yaml
        version = get_version_from_pubspec
        version_name = version[:version_number]
        version_code = version[:build_number]

        # Obtenez la date du jour sous forme de AAAAMMJJ (ex. : 24122024 pour 24 décembre 2024)
            date_today = Time.now.strftime("%d%m%Y")

        # Créer le nom du fichier IPA avec la version
        ipa_filename = "MeteoApp_#{version_name}+#{version_code}_#{date_today}.ipa"
        UI.message("Nom du fichier IPA : #{ipa_filename}")

        # Déplacer le fichier généré dans un dossier organisé avec le nom personnalisé
        sh "mkdir -p ../build_output"
        sh "cp ../build/ios/ipa/*.ipa ../build_output/#{ipa_filename}"

        UI.message("IPA iOS généré dans `build_output/#{ipa_filename}`")

  # Exporter l'IPA signé
#           export_command = "xcodebuild -exportArchive -archivePath ./build/ios/archive/Runner.xcarchive -exportPath ./build/ios/ipa -exportOptionsPlist ./ios/ExportOptions.plist"
#           sh export_command

  UI.message("Fichier IPA généré dans build/ios/ipa/Runner.ipa")
end

# Méthode pour extraire la version et le numéro de build depuis pubspec.yaml
private_lane :get_version_from_pubspec do
  pubspec_path = "../pubspec.yaml"
  pubspec = YAML.load_file(pubspec_path)

  version_string = pubspec["version"]
  version_parts = version_string.split('+')

  {
    version_number: version_parts[0],
    build_number: version_parts[1]
  }
end

lane :increment_version do
  require 'yaml'

  pubspec_path = '../pubspec.yaml'

  # Lire tout le fichier en mémoire
  lines = File.readlines(pubspec_path)

  # Trouver et extraire la version et le numéro de build actuel
  version_info = nil
  lines.each do |line|
    if line.strip.start_with?('version:')
      version_info = line.split(':').last.strip
      break
    end
  end

  version, build_number = version_info.split('+')
  build_number = build_number.to_i

  # Afficher la version et le build actuel
  UI.message("Version actuelle : #{version}+#{build_number}".red)

  # Demander si on souhaite modifier le numéro de build uniquement
  modify_build_only = prompt(
    text: "Voulez-vous modifier le numéro de build ? (yes/no)",
    boolean: true
  )

  if modify_build_only
    # Demander si on souhaite aussi changer le numéro de version
    modify_version = prompt(
      text: "Voulez-vous aussi changer le numéro de version actuel (#{version}) ? (yes/no)",
      boolean: true
    )

    # Modifier la version si nécessaire
    if modify_version
      version_parts = version.split('.').map(&:to_i)
      version_parts[2] += 1 # Incrementer le patch (x.y.z)
      version = version_parts.join('.')
    end

    # Incrémentation du numéro de build
    build_number += 1
  else
    UI.message("Aucune modification apportée.")
    return
  end

  # Afficher le numéro de version et build modifié
  UI.message("Nouvelle version : #{version}+#{build_number}".red)

  # Réécrire le fichier avec la ligne modifiée
  lines.map! do |line|
    if line.strip.start_with?('version:')
      "version: #{version}+#{build_number}\n"
    else
      line
    end
  end

  # Réécrire le fichier avec la ligne modifiée
  File.write(pubspec_path, lines.join)
  UI.message("Fichier pubspec.yaml mis à jour avec succès.")
end

desc "Incrémenter la version et construire Android et iOS"
lane :all do
  increment_version
  build_ios
  build_android
end

# Fonction pour obtenir la version depuis pubspec.yaml
def get_version_from_pubspec
  require 'yaml'

  # Charger le fichier pubspec.yaml
  pubspec_path = '../pubspec.yaml'
  pubspec = YAML.load_file(pubspec_path)

  # Extraire la version et le code de version
  version = pubspec['version'].split('+')
  version_number = version[0] # Partie x.y.z
  build_number = version[1].to_i

  return { version_number: version_number, build_number: build_number }
end